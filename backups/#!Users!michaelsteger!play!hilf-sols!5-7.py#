#!/usr/sww/bin/python

import sys, os, re

def Error (msg):
    print >>sys.stderr, msg
    sys.exit (1)

def readArbitrageTable (tokens):
    n = int (tokens.next ())
    tab = []
    for i in xrange (0, n*(n-1)):
        tab.append (float (tokens.next ()))
    return n, tab

def get (table, n, i, j):
    i -= 1
    j -= 1
    if i == j:
        return 1.0
    elif i > j:
        return table[i * (n-1) + j]
    else:
        return table[i * (n-1) + j - 1]

inp, out = sys.argv[1:]

mat = re.match (r'(.*)\.inp', inp)
hints = open (mat.group (1) + ".results")
tst = open (out)

tokens = re.findall (r'(\S+)', open(inp).read ()).__iter__ ()

n = 0
for hint in hints:
    n += 1
    while True:
        result = tst.readline ()
        if result == '':
            Error ("Output was missing for some inputs")
        elif re.match (r'\s*$', result):
            continue
        else:
            result = result.strip ()
            break

    if hint.strip () == 'no arbitrage sequence exists':
        if result != 'no arbitrage sequence exists':
            Error ("Result #%d incorrect (should be no solution)" %n)
        m, table = readArbitrageTable (tokens);
    else:
        nhint = re.split (r'\s+', hint.strip ())
        try:
            results = map (int, re.split (r'\s+', result))
        except:
            Error ("Result #%d has bad format: %s" % (n, result))
        if nhint < len (results):
            Error ("Result #%d has more than minimal number of transactions"%n)
        if results[0] != results[-1]:
            Error ("Result #%d has unequal first and last currencies" % n)
                    
        m, table = readArbitrageTable (tokens)
        val = 1.0
        for i in xrange (1, len (results)):
            val *= get (table, m, results[i-1], results[i])
        if val <= 1.01:
            Error ("Trading sequence #%d did not give a profit >1%%" % n)
        
